#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: python-setuptools:build: "Produce a package of indicated format based on a PyPI based distribution"
#/ usage: rerun python-setuptools:build  --version <>  --directory <> [ --url <http://pypi.python.org/packages/source>]  --name <> [ --package-format <rpm>] [ --package-release <1>] [ --package-name <>] [ --packager <>] [ --format <tar.gz>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh build || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: python-setuptools:build. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: VERSION DIRECTORY URL NAME PACKAGE_FORMAT PACKAGE_RELEASE PACKAGE_NAME PACKAGER FORMAT

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

unarchive() {

   archive="$1"

   case ${FORMAT} in
      "tar.gz")
         if ! tar xf "${archive}"
         then
            echo "unable to untar archive ${archive}" 1>&2
            return 1
         fi
         ;;
      "zip")
         if ! unzip "${archive}"
         then
            echo "unable to unzip archive ${archive}" 1>&2
            return 1
         fi
         ;;
      *)
         echo "unsupported archive format: ${FORMAT}" 1>&2
         return 1
         ;;
   esac

   return 0
}

#
# From the PyPI name and version information, derive a url to download the tgz distribution.
# Execute the python setup bdist_rpm (see http://docs.python.org/release/2.0/dist/creating-rpms.html) on the extracted
# distribution to generate the RPM.
# Finally, copy the rpm to the provided directory name.
#
buildrpm() {
   mkdir -p "${DIRECTORY}"
   N=$(echo "${NAME}" |cut -c1)
   distUrl="${URL}/${N}/${NAME}/${NAME}-${VERSION}.${FORMAT}"
   tmpDir=$(mktemp -d)
   popDir=$(pwd)
   cd "${tmpDir}"
   if ! curl -s -k -f -o ${NAME}-${VERSION}.${FORMAT} "${distUrl}"
   then
      rerun_die "Unable to download ${distUrl} to temporary location $(pwd)"
   fi
   if ! unarchive ${NAME}-${VERSION}.${FORMAT}
   then
      rerun_die "Unable to extract distribution $(pwd)/${NAME}-${VERSION}.${FORMAT}"
   fi
   cd ${NAME}-${VERSION}

   bdistRpmParams=
   [[ -n "${PACKAGE_RELEASE}" ]] && bdistRpmParams="--release ${PACKAGE_RELEASE}"

   [[ -n "${PACKAGER}" ]] && bdistRpmParams="--packager '${PACKAGER}' ${bdistRpmParams}"

   #
   # this is a hack to allow us to control the name of the packaged rpm which may need to differ from the hardcoded name from PyPI repo.
   #
   if [[ -n "${PACKAGE_NAME}" ]] 
   then
      sed -i "s/\(^ *name *= *\)\(.*\)$/\1'${PACKAGE_NAME}',/g" setup.py 
   else
      PACKAGE_NAME=$NAME
   fi

   if ! eval python setup.py bdist_rpm "${bdistRpmParams}" > /dev/null 2>&1
   then
      rerun_die "python $(pwd)/setup.py bdist_rpm ${bdistRpmParams} failed"
   fi

   #
   # search for a produced rpm archive based on possible architectures:  noarch, i386, and x86_64.
   # if none are found, we shall assume failure.
   #
   foundArch=0
   for arch in noarch i386 x86_64
   do
      distProduced=$(pwd)/dist/${PACKAGE_NAME}-${VERSION}-${PACKAGE_RELEASE}.${arch}.rpm

      if [ -f "${distProduced}" ]
      then
         foundArch=1
         break
      fi
   done
   if [ $foundArch = 0 ]
   then
      rerun_die "dist matching $(pwd)/dist/${PACKAGE_NAME}-${VERSION}-${PACKAGE_RELEASE}.{noarch,i386,x86_64}.rpm did not get generated"
   fi

   if ! rpm -qpl ${distProduced} > /dev/null 2>&1
   then
      rerun_die "${distProduced} does appear to be a valid rpm"
   fi
   if ! cp ${distProduced} "${DIRECTORY}"
   then
      rerun_die "Unable to copy ${distProduced} to directory ${DIRECTORY}"
   fi
   cd ${popDir}
   rm -rf "${tmpDir}"
   echo "produced ${DIRECTORY}/$(basename ${distProduced})"
}

#
# Supported output format (RPM only)
#
case ${PACKAGE_FORMAT} in
   "rpm")
      buildrpm 
      ;;
   *)
      rerun_die "invalid format ${PACKAGE_FORMAT}"
      ;;
esac

# Done. Exit with last command exit status.
exit $?

